# filename: ~/.bashrc.d/K8s

# THIS FILE WAS DERIVED FROM
# https://raw.githubusercontent.com/cloudxabide/devops/main/Files/.bashrc.d_K8s
# curl -o ~/.bashrc.d/K8s https://raw.githubusercontent.com/cloudxabide/devops/main/Files/.bashrc.d_K8s

KUBECONFIG=${HOME}/.kube/config

#############
## ALIASES
## Alias(es) do not accept parameters - use a function, if you need to pass something in
# Kubernetes specific aliases (work-in-progress)
alias k=$(which kubectl)
alias kge='clear; kubectl get events --sort-by=.lastTimestamp'
alias kgea='clear; kubectl get events -A --sort-by=.lastTimestamp'
alias kwtf='clear; kubectl top pod; echo; kubectl top node; echo; kubectl get events --sort-by=.lastTimestamp'

#############
## ROUTINES

update_kubeconfig() {
unset KUBECONFIG; export KUBECONFIG=${HOME}/.kube/config
cp $KUBECONFIG "$KUBECONFIG.$(date +%F).$(uuidgen | tr -d '-' | head -c 6)"
cat /dev/null > $KUBECONFIG
for CONFIG in $(find ~/.kube -type f \( -name "*.kubeconfig" -o -name "*.yaml" \)); do export KUBECONFIG=$KUBECONFIG:$CONFIG; done
kubectl config view --flatten > ${HOME}/.kube/config
unset KUBECONFIG; export KUBECONFIG=${HOME}/.kube/config
}

update_cilium() {
CILIUM_CLI_VERSION=$(curl -s https://raw.githubusercontent.com/cilium/cilium-cli/main/stable.txt)
CLI_ARCH=amd64
if [ "$(uname -m)" = "aarch64" ]; then CLI_ARCH=arm64; fi
curl -L --fail --remote-name-all https://github.com/cilium/cilium-cli/releases/download/${CILIUM_CLI_VERSION}/cilium-linux-${CLI_ARCH}.tar.gz{,.sha256sum}
sha256sum --check cilium-linux-${CLI_ARCH}.tar.gz.sha256sum
sudo tar xzvfC cilium-linux-${CLI_ARCH}.tar.gz /usr/local/bin
rm cilium-linux-${CLI_ARCH}.tar.gz{,.sha256sum}
}

# replicationg the OpenShit "oc ns" command, sort of
#  I am not sure this is even needed
kns() {
  if [[ -z $1 ]]
  then
    kubectl get ns
    echo
    echo -e "Current namespace is: $(kubectl config get-contexts | grep \* | awk '{ print $5 }')"
  else
    kubectl config set-context --current --namespace=${1}
    echo "Current namespace is: $1"
  fi
}

export KUBECONFIG

# for CONTEXT in $( kubectl config get-contexts -o name); do kubectl config use-context $CONTEXT; kubectl get all; sleep 1; done
